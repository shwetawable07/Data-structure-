Q.1) Write a C program to create
random n elements and sort it 
in ascending order by using
insertion sort.

#include <stdio.h>
#include <stdlib.h>
int main() {
int n, i, j, key;
printf("Enter number of elements: ");
scanf("%d", &n);
int arr[n];
printf("\nUnsorted Array:\n");
for(i = 0; i < n; i++) {
arr[i] = rand() % 100;  
printf("%d ", arr[i]);
}
for(i = 1; i < n; i++) {
key = arr[i];
j = i - 1;
while(j >= 0 && arr[j] > key) 
{
arr[j + 1] = arr[j];
j--;
}
arr[j + 1] = key;
}
printf("\n\nSorted Array (Ascending Order):\n");
for(i = 0; i < n; i++) {
printf("%d ", arr[i]);
}
return 0;
}





Q.2) Write a menu-driven program for the
following operations on a singly
linked list. 
1. Create and display a linked list
of your nodes. 
2. Search a particular element 
from the linked list.

#include <stdio.h>
#include <stdlib.h>
struct Node {
int data;
struct Node *next;
};
struct Node *head = NULL;
void create() {
int n, i;
printf("Enter number of nodes: ");
scanf("%d", &n);
for(i=0; i<n; i++) {
struct Node *newNode = (struct Node*)malloc(sizeof(struct Node));
printf("Enter data for node %d: ", i+1);
scanf("%d", &newNode->data);
newNode->next = NULL;
if(head == NULL)
head = newNode;
else {
struct Node *temp = head;
while(temp->next != NULL)
temp = temp->next;
temp->next = newNode;
}
}
}
void display() {
struct Node *temp = head;
if(temp == NULL)
printf("List is empty\n");
else {
printf("Linked List: ");
while(temp != NULL) {
printf("%d ", temp->data);
temp = temp->next;
}
printf("\n");
}
}
void search() {
int key, found = 0;
printf("Enter element to search: ");
scanf("%d", &key);
struct Node *temp = head;
while(temp != NULL) {
if(temp->data == key) {
found = 1;
break;
}
temp = temp->next;
}
if(found)
printf("Element %d found.\n", key);
else
printf("Element %d not found.\n", key);
}
int main() {
int ch;
while(1) {
printf("\n--- MENU ---\n1. Create & Display\n2. Search\n3. Exit\nEnter choice: ");
scanf("%d", &ch);
switch(ch) {
case 1: create(); display(); break;
case 2: search(); break;
case 3: exit(0);
default: printf("Invalid choice\n");
}
}
return 0;
}




Q.3) Accept the array of n integers
from user and sort the array in 
ascending order by usingrecursive 
quick algorithm.

#include <stdio.h>
void quickSort(int a[], int low, int high) {
if(low < high) {
int pivot = a[high];
int i = low - 1, j, temp;
for(j = low; j < high; j++) {
if(a[j] < pivot) {
i++;
temp = a[i]; a[i] = a[j]; a[j] = temp;
}
}
temp = a[i + 1]; a[i + 1] = a[high]; a[high] = temp;
 int p = i + 1;
quickSort(a, low, p - 1);
quickSort(a, p + 1, high);
}
}
int main() {
int n, i;
printf("Enter number of elements: ");
scanf("%d", &n);
int a[n];
printf("Enter %d elements:\n", n);
for(i = 0; i < n; i++)
scanf("%d", &a[i]);
quickSort(a, 0, n - 1);
printf("Sorted array (Ascending Order): ");
for(i = 0; i < n; i++)
printf("%d ", a[i]);
return 0;
}


Q.4) Write a C Program to implement
singly linked list with create 
and display operations

#include <stdio.h>
#include <stdlib.h>
struct Node {
int data;
struct Node *next;
};
struct Node *head = NULL;
void create() {
int n, i;
printf("Enter number of nodes: ");
scanf("%d", &n);
for(i=0; i<n; i++) {
struct Node *newNode = (struct Node*)malloc(sizeof(struct Node));
printf("Enter data for node %d: ", i+1);
scanf("%d", &newNode->data);
newNode->next = NULL;
if(head == NULL)
head = newNode;
else {
struct Node *temp = head;
while(temp->next != NULL)
temp = temp->next;
temp->next = newNode;
}
}
}
void display() {
struct Node *temp = head;
if(temp == NULL)
printf("List is empty\n");
else {
printf("Linked List: ");
while(temp != NULL) {
printf("%d ", temp->data);
temp = temp->next;
}
printf("\n");
}
}
int main() {
create();
display();
return 0;
}


Q.5) Write a menu-driven program
for the following operations 
on a singly linked list. 
1. Create and display a
linked list of your nodes. 
2. Delete a particular element
from the linked list.

#include <stdio.h>
#include <stdlib.h>
struct Node {
int data;
struct Node *next;
};
struct Node *head = NULL;
void create() {
int n, i;
printf("Enter number of nodes: ");
scanf("%d", &n);
for(i = 0; i < n; i++) {
struct Node *newNode = (struct Node*)malloc(sizeof(struct Node));
printf("Enter data for node %d: ", i+1);
scanf("%d", &newNode->data);
newNode->next = NULL;
if(head == NULL)
head = newNode;
else {
struct Node *temp = head;
while(temp->next != NULL)
temp = temp->next;
temp->next = newNode;
}
}
}
void display() {
struct Node *temp = head;
if(temp == NULL)
printf("List is empty\n");
else {
printf("Linked List: ");
while(temp != NULL) {
printf("%d ", temp->data);
temp = temp->next;
}
printf("\n");
}
}
void deleteNode() {
int key;
printf("Enter element to delete: ");
scanf("%d", &key);
struct Node *temp = head, *prev = NULL;
while(temp != NULL && temp->data != key) {
prev = temp;
temp = temp->next;
}
if(temp == NULL)
printf("Element not found.\n");
else {
if(prev == NULL)
head = temp->next;
else
prev->next = temp->next;
free(temp);
printf("Element %d deleted.\n", key);
}
}
int main() {
int ch;
while(1) {
printf("\n--- MENU ---\n1. Create & Display\n2. Delete Element\n3. Exit\nEnter choice: ");
scanf("%d", &ch);
switch(ch) {
case 1: create(); display(); break;
case 2: deleteNode(); display(); break;
case 3: exit(0);
default: printf("Invalid choice\n");
}
}
return 0;
}

























